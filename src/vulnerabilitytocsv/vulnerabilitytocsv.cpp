/*
* Copyright (c)2015 - 2016 Oasis LMF Limited
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
*   * Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*
*   * Redistributions in binary form must reproduce the above copyright
*     notice, this list of conditions and the following disclaimer in
*     the documentation and/or other materials provided with the
*     distribution.
*
*   * Neither the original author of this software nor the names of its
*     contributors may be used to endorse or promote products derived
*     from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
* COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
* OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
* AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
* THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
* DAMAGE.
*/
/*
Convert item output to csv
Author: Joh Carter  email: johanna.carter@oasislmf.org
*/
#include <iostream>
#include <stdio.h>
#include <stdlib.h>

#if defined(_MSC_VER)
#include "../wingetopt/wingetopt.h"
#else
#include <unistd.h>
#endif

#include "../include/oasis.h"


inline void printrows(int vulnerability_id, FILE *finx, long long size)
{

	long long i = 0;
	while (i < size) {
		VulnerabilityRow row;
		fread(&row, sizeof(row), 1, finx);
		printf("%d, %d, %d, %.10e\n", vulnerability_id,
		       row.intensity_bin_id, row.damage_bin_id,
		       row.probability);
		i += sizeof(row);
	}

}

void doit(bool skipheader, bool index_file)
{

	if (skipheader == false) {
		printf("vulnerability_id,intensity_bin_id,damage_bin_id,"
		       "probability\n");
	}

	if (index_file) {

		const char *binFileName = "vulnerability.bin";
		const char *idxFileName = "vulnerability.idx";
		FILE *finx = fopen(binFileName, "rb");
		FILE *finy = fopen(idxFileName, "rb");
		if (finy == nullptr) {
			fprintf(stderr,
				"FATAL: Vulnerability idx open failed\n");
			exit(EXIT_FAILURE);
		}

		VulnerabilityIndex idx;
		size_t i = fread(&idx, sizeof(idx), 1, finy);
		while (i != 0) {
			flseek(finx, idx.offset, SEEK_SET);
			printrows(idx.vulnerability_id, finx, idx.size);
			i = fread(&idx, sizeof(idx), 1, finy);
		}

		fclose(finx);
		fclose(finy);

	} else {

		int damage_bins;
		// Drop the bins
		fread(&damage_bins, sizeof(damage_bins), 1, stdin);

		Vulnerability q;
		int i = fread(&q, sizeof(q), 1, stdin);
		while (i != 0) {
			printf("%d, %d, %d, %.10e\n", q.vulnerability_id,
			       q.intensity_bin_id, q.damage_bin_id,
			       q.probability);
			i = fread(&q, sizeof(q), 1, stdin);
		}

	}

}

void help()
{
	fprintf(stderr, 
		"-h help\n"
		"-i use index file\n"
		"-s skipheader\n"
		"-v version\n"
	);
}

int main(int argc, char *argv[])
{
	int opt;
	bool skipheader = false;
	bool index_file = false;
	while ((opt = getopt(argc, argv, "vhsi")) != -1) {
		switch (opt) {
		case 's':
			skipheader = true;
			break;
		case 'i':
			index_file = true;
			break;
		case 'v':
			fprintf(stderr, "%s : version: %s\n", argv[0], VERSION);
			::exit(EXIT_FAILURE);
			break;
		case 'h':
		default:
			help();
			::exit(EXIT_FAILURE);
		}
	}

	initstreams();
	doit(skipheader, index_file);
	return EXIT_SUCCESS;
}


